# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: 2 Build and Push Image to GAR

on: workflow_dispatch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: gkecluster-demo    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: oapi-test # TODO: update to deployment name
  REPOSITORY: oaviles # TODO: update to Artifact Registry docker repository
  IMAGE: oaapi
  LATEST_TAG: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/oagar01/oaapi:latest 

jobs:
  build-push-image:
    name: Build and Push Image
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    #- id: 'auth'
    #  name: 'Authenticate to Google Cloud'
    #  uses: 'google-github-actions/auth@v0'
    #  with:
    #    token_format: 'access_token'
    #    workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
    #    service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Login to GAR
      uses: docker/login-action@v1
      with:
        registry: us-centra1-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GCP_CREDENTIALS }}
          
    - name: Build and push to GAR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ env.LATEST_TAG }}  

